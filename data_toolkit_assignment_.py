# -*- coding: utf-8 -*-
"""Data Toolkit Assignment .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nxLYM0xFBYm8J_QFAoeDhpwewsw9CXJo

## ***Data Toolkit***



1. What is NumPy, and why is it widely used in Python?

ANS:

NumPy is a Python library that helps you work with numbers efficiently, especially in large datasets. It provides special arrays that are faster and take less memory than normal Python lists. It’s widely used because it has built-in math functions, supports big calculations easily, and works well with other libraries like Pandas and Matplotlib.

2. How does broadcasting work in NumPy?

ANS:

Broadcasting in NumPy means it can perform operations on arrays of different shapes without making extra copies. For example, you can add a single number to every element in an array without looping. NumPy automatically stretches the smaller array to match the larger one’s shape for calculations.

3. What is a Pandas DataFrame?

ANS:

A Pandas DataFrame is like an Excel sheet inside Python. It stores data in rows and columns, making it easy to read, clean, and analyze. You can filter rows, change column names, and even create new columns with simple commands.

4. Explain the use of the groupby() method in Pandas.

ANS:

The groupby() method is used to group your data based on one or more columns, then perform operations like sum, average, or count. For example, you can group sales data by “Region” and quickly see totals for each region. It’s very handy for summarizing big datasets.

5. Why is Seaborn preferred for statistical visualizations?

ANS:

Seaborn is preferred because it makes beautiful and informative charts with very little code. It comes with built-in themes, color palettes, and works smoothly with Pandas DataFrames. It’s great for statistical graphs like heatmaps, box plots, and distribution plots.

6. What are the differences between NumPy arrays and Python lists?

ANS:

NumPy arrays are faster, take less memory, and can handle large mathematical operations more efficiently than Python lists. Lists can store different types of data, but arrays store data of the same type, making them faster. Arrays also support vectorized operations, which lists can’t do directly.

7. What is a heatmap, and when should it be used?

ANS:

A heatmap is a chart that uses colors to represent values, making patterns easy to see. It’s often used to show relationships between two factors, like correlations between variables. It’s useful when you want a quick, visual way to spot trends or problem areas.

8. What does the term “vectorized operation” mean in NumPy?

ANS:

Vectorized operations mean you can do calculations on whole arrays at once without using loops. For example, adding two arrays directly instead of looping through each element. This makes your code shorter, cleaner, and much faster.

9. How does Matplotlib differ from Plotly?

ANS:

Matplotlib is great for creating static, publication-style plots, while Plotly focuses on interactive visualizations. In Plotly, you can hover over points, zoom in, and filter data directly in the chart. Matplotlib is older and widely used, but Plotly is better for dashboards and web apps.

10. What is the significance of hierarchical indexing in Pandas?

ANS:

Hierarchical indexing lets you use multiple index levels for rows or columns. This makes it easier to work with more complex datasets, like sales data grouped by both region and year. It also helps in reshaping and summarizing data more flexibly.

11. What is the role of Seaborn’s pairplot() function?

ANS:

pairplot() creates a grid of plots that shows relationships between all numeric columns in your DataFrame. It’s useful for quickly spotting correlations, patterns, and outliers between multiple variables. It’s especially helpful in exploratory data analysis.

12. What is the purpose of the describe() function in Pandas?

ANS:

The describe() function gives you quick summary statistics for numeric columns, like mean, min, max, and standard deviation. It helps you understand your data’s distribution and spot any unusual values. It’s a go-to tool for a first look at the dataset.

13. Why is handling missing data important in Pandas?

ANS:

Missing data can lead to wrong calculations and misleading results. Handling it means filling in missing values, removing incomplete rows, or using methods that can work with missing data. It’s important because clean data leads to accurate insights.

14. What are the benefits of using Plotly for data visualization?

ANS:

Plotly makes charts interactive, so users can explore data by zooming, filtering, or hovering for details. It supports many chart types, from basic bars to complex 3D plots. It’s great for dashboards and presentations where interactivity matters.

15. How does NumPy handle multidimensional arrays?

ANS:

NumPy uses its ndarray structure to handle data in multiple dimensions, like 2D (matrices) or 3D arrays. It lets you slice, reshape, and perform operations across any axis easily. This is very useful for image processing, scientific data, and big datasets.

16. What is the role of Bokeh in data visualization?

ANS:

Bokeh is a Python library for making interactive, web-friendly visualizations. It’s designed for modern browsers and can create dashboards that update in real-time. It’s useful for projects where you need both beauty and interactivity.


17. Explain the difference between apply() and map() in Pandas.

ANS:

map() is used for applying a function to each element in a Series, while apply() can be used on both Series and DataFrames. apply() can also work on rows or columns, making it more flexible. Use map() for simpler element-wise changes and apply() for more complex operations.

18. What are some advanced features of NumPy?

ANS:

Some advanced features include broadcasting, masked arrays, linear algebra functions, random number generation, and FFT (Fast Fourier Transform). It also has tools for reading/writing files and handling complex multidimensional data efficiently.

19. How does Pandas simplify time series analysis?

ANS:

Pandas has built-in tools for handling dates and times, like resampling, shifting, and rolling windows. You can easily filter data by date ranges, group by months or years, and calculate trends. It makes working with time-based data much easier.

20. What is the role of a pivot table in Pandas?

ANS:

A pivot table summarizes data by grouping and applying aggregation functions like sum or average. It’s similar to Excel pivot tables but in Python. It’s great for quickly reshaping and analyzing large datasets.

21. Why is NumPy’s array slicing faster than Python’s list slicing?

ANS:

NumPy arrays store data in a continuous block of memory, which makes slicing operations faster. Python lists store references to objects scattered in memory, so slicing is slower. Also, NumPy slices return views instead of copies, saving time and memory.

22. What are some common use cases for Seaborn?

ANS:

Seaborn is often used for exploring relationships between variables, showing data distributions, and creating statistical plots. Common charts include heatmaps, boxplots, scatter plots, and bar plots. It’s ideal for quick and stylish visualizations during data analysis.
"""

#01. How do you create a 2D NumPy array and calculate the sum of each row ?

import numpy as np

# Create a 2D array
arr = np.array([[1, 2, 3],
                [4, 5, 6],
                [7, 8, 9]])

# Sum of each row
row_sum = np.sum(arr, axis=1)
print("Row-wise sum:", row_sum)

#02.Write a Pandas script to find the mean of a specific column in a DataFrame ?

import pandas as pd

data = {'Name': ['A', 'B', 'C'],
        'Score': [85, 90, 78]}
df = pd.DataFrame(data)

mean_score = df['Score'].mean()
print("Mean Score:", mean_score)

#03.Create a scatter plot using Matplotlib ?

import matplotlib.pyplot as plt

x = [5, 7, 8, 7, 6, 9, 5]
y = [99, 86, 87, 88, 100, 86, 103]

plt.scatter(x, y, color='blue')
plt.title("Scatter Plot")
plt.xlabel("X Axis")
plt.ylabel("Y Axis")
plt.show()

#04.How do you calculate the correlation matrix using Seaborn and visualize it with a heatmap?

import seaborn as sns
import pandas as pd

# Sample DataFrame
data = {'A': [1, 2, 3, 4],
        'B': [4, 3, 2, 1],
        'C': [5, 6, 7, 8]}
df = pd.DataFrame(data)

# Correlation + heatmap
corr = df.corr()
sns.heatmap(corr, annot=True, cmap="coolwarm")
plt.show()

#05.Generate a bar plot using Plotly?

import plotly.express as px

data = {'Fruits': ['Apple', 'Mango', 'Cherry'],
        'Count': [10, 15, 7]}
fig = px.bar(data, x='Fruits', y='Count', title="Fruit Count")
fig.show()

#06. Create a DataFrame and add a new column based on an existing column?

import pandas as pd

df = pd.DataFrame({'Price': [100, 200, 300]})
df['Discounted'] = df['Price'] * 0.9  # 10% discount
print(df)

#07.Write a program to perform element-wise multiplication of two NumPy arrays?

import numpy as np

arr1 = np.array([1, 2, 3])
arr2 = np.array([4, 5, 6])

result = arr1 * arr2
print(result)

#08.Create a line plot with multiple lines using Matplotlib?

x = [1, 2, 3, 4, 5]
y1 = [1, 4, 9, 16, 25]
y2 = [1, 3, 6, 10, 15]

plt.plot(x, y1, label="Squares")
plt.plot(x, y2, label="Cumulative Sum")
plt.legend()
plt.title("Multiple Line Plot")
plt.show()

#09.Generate a Pandas DataFrame and filter rows where a column value is greater than a threshold?

import seaborn as sns

data = [7, 8, 5, 6, 7, 8, 9, 5, 6, 7]
sns.histplot(data, bins=5, kde=True)
plt.title("Distribution Histogram")
plt.show()

#10. Create a histogram using Seaborn to visualize a distribution?

import seaborn as sns

data = [7, 8, 5, 6, 7, 8, 9, 5, 6, 7]
sns.histplot(data, bins=5, kde=True)
plt.title("Distribution Histogram")
plt.show()

#11.Perform matrix multiplication using NumPy?

A = np.array([[1, 2],
              [3, 4]])
B = np.array([[5, 6],
              [7, 8]])

result = np.dot(A, B)
print("Matrix Multiplication Result:\n", result)

#12.Use Pandas to load a CSV file and display its first 5 rows?

import pandas as pd

df = pd.read_csv("/content/services.csv")  # Upload your CSV first
print(df.head())

#13.Create a 3D scatter plot using Plotly?

import plotly.express as px
import pandas as pd

df = pd.DataFrame({
    'x': [1, 2, 3, 4],
    'y': [10, 11, 12, 13],
    'z': [5, 6, 7, 8],
    'color': ['A', 'B', 'A', 'B']
})

fig = px.scatter_3d(df, x='x', y='y', z='z', color='color', title="3D Scatter Plot")
fig.show()